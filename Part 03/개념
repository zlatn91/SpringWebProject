[1] 웹 프로젝트의 기본구성 (3-tier)

  (1) Presentation Tier (화면 계층)
    화면에 보여주는 기술을 사용하는 영역. Servlet/JSP나 스프링 MVC가 담당하는 영역이 됨
    프로젝트의 성격에 맞춰 앱으로 제작하거나, CS(Client-Server)로 구상되는 경우도 있음
    학습한 Spring MVC와 JSP를 이용한 화면구성이 CS에 속함

  (2) Business Tier (비지니스 계층)
    순수한 비지니스 로직을 담고있는 영역, 이 영역이 중요한 이유는 고객이 원하는 요구 사항을 반영하는 계층이기 때문
    이 영역의 설게는 고객의 요구 사항과 정확히 일치해야 함.
    이 영역은 주로 'xxxService'와 같은 이름으로 구성하고,
    메서드의 이름 역시 고객들이 사용하는 용어를 그대로 사용하는것이 좋음

  (3) Persistence Tier (영속 계층 혹은 데이터 계층)
    어떤 방식으로 데이터를 보관하고, 사용하는가에 대한 설계가 들어가는 계층
    일반적인 경우 데이터베이스를 많이 이용하지만 경우에 따라서 네트워크 호출이나 원격 호출 등의 기술이
    접목될 수 있음
    이 영역은 MyBatis와 mybatis-spring을 이용해서 구성했던 파트1을 이용함


[2] 각 영역의 Naming Convention (명명 규칙)

  프로젝트를 3-tier로 구성하는 가장 일반적인 설명은 '유지 보수'에 대한 필요성 때문
  각 영역은 독립적으로 설계되어 나중에 특정한 기술이 변하더라도 필요한 부분을 전자제품의 부품처럼
  쉽게 교환할 수 있게 하자는 방식
  각 영역은 설계당시부터 영역을 구분하고, 해당 연결 부위는 인터페이스를 이용해서 설계하는것이 일반적인 구성 방식

  (1) xxxController: 스프링 MVC에서 동작하는 Controller 클래스를 설계할 때 사용함

  (2) xxxService, xxxServiceImpl:  비지니스 영역을 담당하는 인터페이스는 'xxxService'라는 방식을 사용
    인터페이스를 구현한 클래스는 'xxxServiceImpl'이라는 이름을 사용함

  (3) xxxDAO, xxxRepository: DAO(Data-Access-Object)나 Repository(저장소) 라는 이름으로 영역을
    따로 구성하는것이 보편적. 다만 책의 예제는 별도의 DAO를 구성하는 대신에 MyBatis의 Mapper 인터페이스를 활용

  (4) VO, DTO: VO와 DTO는 일반적으로 유사한 의미, 데이터를 담고 있는 객체를 의미한다는 공통점
    다만 VO의 경우 주로 Read Only의 목적이 강하고, 데이터 자체도 immutable(불변)하게 설계하는 것이 정석
    DTO는 주로 데이터 수집의 용도가 좀 더 강함
    ex) 웹 화면에서 로그인하는 정보를 DTO로 처리하는 방식을 사용, 이 책에서는 테이블과 관련된 데이터는 VO라는 이름을 사용

[3] 패키지의 Naming Convention

  패키지의 구성은 프로젝트의 크기, 구성원들의 성향 등으로 결정
    ex) 규모가 작은 프로젝트는 Controller 영역을 별도의 패키지로 설계하고, Service 영역등을 하나의 패키지로 설계할 수 있음
    반면 규모가 큰 프로젝트는 많은 Service 클래스와 Controller들이 혼재할 수 있다면 비지니스를 단위별로 구분
    (비지니스 단위 별로 패키지를 작성하고) 다시 내부에서 Controller 패키지, Service 패키지 등으로 다시 나누는 방식을 이용함
    이러한 방식은 담당자가 명확해지고, 독립적인 설정을 가지는 형태로 개발하기 때문에 큰 규모의 프로젝트에 적합
    다만 패키지가 많아지고 구성이 복잡하게 느껴지는 단점이 있음


  
