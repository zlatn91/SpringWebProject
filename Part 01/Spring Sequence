[0] Spring이 동작하면서 생기는 일

    작성 클래스와 root-context.xml이 어떻게 동작하는가

    (1) 스프링 프레임워크 시작시 스프링이 사용하는 메모리 영역을 생성 이를 컨텍스트(Context)라고 함,
        스프링에서는 ApplicationContext라는 객체가 만들어 짐

    (2) 스프링은 자신이 객체를 생성하고 관리해야 하는 객체들에 대한 설정이 필요
        이에 대한 설정이 root-context.xml

    (3) root-context.xml에 설정된 <context:component-scan> 태그를 이용해서
        해당 Path의 패키지를 스캔

    (4) 해당 패키지에 있는 클래스들중 @Component 어노테이션을 찾아 클래스의 인스턴스 생성

    (5) Restaurant 는 Chef가 필요하다는  @Autowired 어노테이션이 있기에 스프링은
        Chef객체의 레퍼런스를 Restaurant에 주입해줌

[1] Test

  (1) @RunWith(SpringJUnit4ClassRunner.class)

        테스트 코드가 스프링을 실행하는 역할을 할 것이라는 어노테이션

  (2) @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")

        지정된 클래스나 문자열을 이용해서 필요한 객체들을 스프링 내에 객체로 등록하게됨 (스프링 빈)
        문자열은 classpath: 나 file: 사용가능
        STS에서 자동으로 생성된 root-context.xml의 경로를 지정 할 수 있다

  (3) @Log4j

        lombok을 이용하여 로그를 기록하는 Logger를 변수로 생성
        별도의 객체선언 없이도 Log4j 라이브러리와 설정이 존재한다면 바로 사용할 수 있다
        Spring Legacy Project로 생성하는 경우 기본으로 Log4j와 해당 설정이 완료된 상태로 사용가능
        로그에 대한 설정은 src/main/resources, src/test/resources에 존재

  (4) @Autowired

      해당 인스턴스 변수가 스프링으로부터 자동 주입 해달라는 표시
      주입이 가능하다면 obj 변수에 Restaurant 타입의 객체를 주입하게 됨

  (5) @test

      JUnit에서 테스트 대상을 표시하는 어노테이션
      Restaurant 변수가 null이 아니어아야만 테스트가 성공한다는 것을 의미함

[2] 테스트 결과의 주목할 부분

  (1) Restaurant 클래스에서 객체를 생성한적 없는데도 객체가 만들어졌다
      스프링은 관리가 필요한 객체(Bean)를 어노테이션 등을 이용하여 객체를 생성하고 관리하는 일종의
      컨테이너, 팩토리의 기능을 갖고있다

  (2) Restaurant 클래스의 @Data 어노테이션으로 Lombok을 이용해서 여러 메소드가 만들어진 점
      Lombok은 자동으로 getter/setter를 만들어 주는데 스프링은 생성자 주입 혹은 setter 주입을 이용해서 동작
      onMethod 속성을 이용해 작성된 setter에 @Autowired 어노테이션을 추가

  (3) Restaurant 객체의 Chef 인스턴스 변수(맴버변수)에 Chef 타입의 객체가 주입된 점
      스프링은 @Autowired 어노테이션을 이용해 개발자가 직업 객체들과의 관계를 관리하지 않고 자동으로 관리
