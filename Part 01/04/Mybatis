전통적인 JDBC

    직접 Connection을 맺고 마지막에 close()
    PreparedStatement 생성및 처리
    PreparedStatement의 setXXX() 등에 대한 모든 작업을
    개발자가 직접 처리
    Select의 경우 직접 ResultSet 처리

MyBatis

  자동으로 Connection close() 가능
  MyBatis 내부적으로 PreparedStatement 처리
  #{prop}와 같이 속성을 지정하면 내부적으로 자동 처리
  리턴 타입을 지정하는 경우 자동으로 객체 생성 및 ResultSet 처리

  기존의 SQL을 그대로 활용할 수 있다는 장점 진입장벽이 낮아 JDBC의 대안으로 많이 사용
  스프링 프레임워크의 특성인 다른 프레임워크들을 배척(따돌리거나 거부하여 밀어 내침)
  하는 대신에 다른 프레임워크들과의 연동을 쉽게 하는 추가적인 라이브러리들이 많다는것

    ex) mybatis-spring

SQLSessionFactory

  MyBatis의 가장 핵심적인 객체 SQLSession 이라는 존재와 SQLSessionFactory

  SQLSessionFactory 의 이름에서 보듯이 SQLSession이라는 것을 만들어내는 존재인데
  개발에서는 SQLSession을 통해서 Connection 객체를 생성하거나 
  원하는 SQL을 전달하고, 결과를 리턴받는 구조로 작성하게 됨
